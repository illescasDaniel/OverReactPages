{"version":3,"sources":["pages/App/App.sass","serviceWorker.js","pages/home/home.js","config/appRoutes.js","pages/App/App.js","index.js"],"names":["module","exports","main","Boolean","window","location","hostname","match","Home","_onForm1ButtonClick","event","console","log","target","innerText","react_default","a","createElement","reactstrap_es","onClick","this","index_es","icon","faCoffee","Component","AppRoutes","Route","key","exact","path","component","App","BrowserRouter","role","className","styles","appRoutes","ReactDOM","render","App_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,KAAA,gKCWEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wJCbeC,6MAEnBC,oBAAsB,SAACC,GACrBC,QAAQC,IAAIF,EAAMG,OAAOC,iIAQzB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAASC,KAAKX,qBACpBM,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBC,KAAMC,MADzB,0BAd0BC,aCGnBC,EAJG,iBAAM,CACtBV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,IAAI,GAAGC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,uBCKrBuB,mLAEjB,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,QAAMgB,KAAK,OAAOC,UAAWC,IAAOjC,MAClCa,EAAAC,EAAAC,cAACmB,EAAD,OAEFrB,EAAAC,EAAAC,cAAA,wBATuBO,aCHjCa,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAAQC,SAASC,eAAe,SJsH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c8db7a57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"_3ia0tor5cAUlW4y6DKAyuh\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\nimport { Button } from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee } from '@fortawesome/free-solid-svg-icons'\n\nexport default class Home extends Component {\n\n  _onForm1ButtonClick = (event) => {\n    console.log(event.target.innerText)\n  }\n\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>hello!</h1>\n        <Button onClick={this._onForm1ButtonClick}>\n          <FontAwesomeIcon icon={faCoffee} /> Form 1 button\n        </Button>\n\n      </div>\n    )\n  }\n}","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport Home from '../pages/home/home'\n\nconst AppRoutes = () => [\n  <Route key='' exact path=\"/\" component={Home}/>,\n]\n\nexport default AppRoutes\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport AppRoutes from '../../config/appRoutes' /* use <Link> to go between routes */\nimport styles from './App.sass'\n// CSS MODULES: import styles from './App.sass' ... <p className={styles.blabla}> ... </p>\n// BOOTSTRAP: import { Button } from 'reactstrap'\n// RESOUCES: import logo from '../../resources/logo.svg'\n// FONT AWESOME: import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// FONT AWESOME icon: import { faCoffee } from '@fortawesome/free-solid-svg-icons'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <header/>\n          <main role=\"main\" className={styles.main}>\n            <AppRoutes/>\n          </main>\n          <footer/>\n        </div>\n      </Router>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.sass'\nimport App from './pages/App/App'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}