{"version":3,"sources":["pages/home/home.sass","resources/logo.svg","pages/home/home.js","pages/about/about.js","config/routes.js","pages/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","testParagraph","reactLogo","__webpack_require__","p","Home","state","recipes","fetch","then","r","json","_this2","setState","results","map","recipe","title","react_default","a","createElement","reactstrap_es","color","index_es","icon","faCoffee","className","styles","src","logo","alt","href","this","Component","About","Routes","Route","exact","path","concat","links","home","component","about","App","BrowserRouter","role","Link","to","routes_Routes","Boolean","window","location","hostname","match","ReactDOM","render","pages_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,cAAA,wBAAAC,UAAA,+CCDlBH,EAAAC,QAAiBG,EAAAC,EAAuB,mVCOnBC,6MACnBC,MAAQ,CACNC,QAAS,CAAC,2MAKVC,MAAM,gEACHC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAF,GACJK,EAAKC,SAAS,CACZN,QAASA,EAAQO,QAAQC,IAAI,SAAAC,GAAM,OAAIA,EAAOC,+IAKpD,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,MAAM,WACZJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAiBC,KAAMC,MADzB,cAGAP,EAAAC,EAAAC,cAAA,KAAGM,UAAWC,IAAO1B,eAArB,QACAiB,EAAAC,EAAAC,cAAA,OAAKM,UAAWC,IAAOzB,UAAW0B,IAAKC,IAAMC,IAAI,SACjDZ,EAAAC,EAAAC,cAAA,oCAA2BF,EAAAC,EAAAC,cAAA,KAAGW,KAAK,yCAAR,YAC3Bb,EAAAC,EAAAC,cAAA,SAAIY,KAAK1B,MAAMC,iBAxBW0B,qBCLbC,mLAEjB,OACEhB,EAAAC,EAAAC,cAAA,kDAH6Ba,aCGdE,mLAMjB,OACEjB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,IAAAC,OAAMJ,EAAOK,MAAMC,MAAQC,UAAWrC,IACvDa,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,IAAAC,OAAMJ,EAAOK,MAAMG,OAASD,UAAWR,YAT5BD,aAAfE,EACZK,MAAQ,CACbC,KAAM,GACNE,MAAO,aCmBIC,mLAlBX,OACE1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,QAAM0B,KAAK,QACT5B,EAAAC,EAAAC,cAAA,OAAKM,UAAU,sBACbR,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAMC,GAAIb,EAAOK,MAAMC,MAAvB,QACAvB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAMC,GAAIb,EAAOK,MAAMG,OAAvB,UAEFzB,EAAAC,EAAAC,cAAC6B,EAAD,OAEF/B,EAAAC,EAAAC,cAAA,wBAbQa,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC","file":"static/js/main.5c435bc9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"testParagraph\":\"dEDSlx2kQJp4eNEqe5oYG\",\"reactLogo\":\"_16UEqIBrNkTdRUSEq6i6wF\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport { Button } from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee } from '@fortawesome/free-solid-svg-icons'\nimport logo from '../../resources/logo.svg'\nimport styles from './home.sass'\n\nexport default class Home extends Component {\n  state = {\n    recipes: ['']\n  }\n  async componentDidMount() {\n    // http://www.recipepuppy.com/about/api/\n    // This is just a test\n    fetch(\"http://www.recipepuppy.com/api/?i=onions,garlic&q=omelet&p=3\")\n      .then(r => r.json())\n      .then(recipes => {\n        this.setState({\n          recipes: recipes.results.map(recipe => recipe.title)\n        })\n      })\n  }\n  render() {\n    return (\n      <div>\n        <Button color=\"success\">\n          <FontAwesomeIcon icon={faCoffee} /> Touch me!\n        </Button>\n        <p className={styles.testParagraph}>hi!!</p>\n        <img className={styles.reactLogo} src={logo} alt=\"logo\" />\n        <p>testing api fetch from: <a href=\"http://www.recipepuppy.com/about/api/\">recipes</a></p>\n        <p>{this.state.recipes}</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class About extends Component {\n  render() {\n    return (\n      <p>Made by Daniel Illescas Romero</p>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Home from '../pages/home/home'\nimport {Route} from 'react-router-dom'\nimport About from '../pages/about/about'\n\nexport default class Routes extends Component {\n  static links = {\n    home: '',\n    about: 'about'\n  }\n  render() {\n    return (\n      <span>\n        <Route exact path={`/${Routes.links.home}`} component={Home} />\n        <Route exact path={`/${Routes.links.about}`} component={About} />\n      </span>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.sass'\nimport { BrowserRouter as Router, Link } from 'react-router-dom'\nimport Routes from \"../../config/routes\"\n\n// css modules\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <header/>\n          <main role=\"main\">\n            <div className=\"d-flex flex-column\">\n              <Link to={Routes.links.home}>Home</Link>\n              <Link to={Routes.links.about}>About</Link>\n            </div>\n            <Routes/>\n          </main>\n          <footer/>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.sass'\nimport App from './pages/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}